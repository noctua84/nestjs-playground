# This is the CI pipeline for the project.
# It will take care of things like dependency upgrades (ncu), testing, coverage (codecov, sonarcloud), builds, versioning and changelog (both standard-version)

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for package updates
        run: ncu --doctor -u

      - name: Check if package.json has changed
        id: check_package_json
        run: git diff --quiet HEAD -- package.json || echo "::set-output name=changed::true"

      - name: Persist changes in package.json
        if: steps.check_package_json.outputs.changed == 'true'
        run: |
          git add package.json package-lock.json
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "chore(dependencies): Update dependencies"
          git push --set-upstream origin ${{ github.head_ref }}:${{ github.head_ref }} --force-with-lease=refs/heads/${{ github.head_ref }}
      
      - name: update installed packages
        if: steps.check_package_json.outputs.changed == 'true'
        run: npm install
      
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

  linting_and_formatting:
    runs-on: ubuntu-latest
    needs: check_dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for dependency updates
        id: check_dependency_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_sha=$(git rev-parse HEAD)
          latest_sha=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.head_ref }} \
          | jq -r '.sha')
          if [[ "$current_sha" != "$latest_sha" ]]; then
          echo "::set-output name=updated::true"
          fi

      - name: Pull latest changes
        if: steps.check_dependency_updates.outputs.updated == 'true'
        run: git pull

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore Node Modules from Cache
        if: steps.check_dependency_updates.outputs.updated == 'false'
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true' || steps.check_dependency_updates.outputs.updated == 'true'
        run: npm install

      - name: Linting
        run: npm run lint

      - name: Formatting
        run: npm run format

      - name: Check if code has changed
        id: check_lint_changes
        run: git diff --quiet HEAD -- || echo "::set-output name=changed::true"

      - name: Persist changes in code
        if: steps.check_lint_changes.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "chore(linting): Fix linting errors"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          git push --force-with-lease="refs/heads/${BRANCH_NAME}"

  tests:
    runs-on: ubuntu-latest
    needs: check_dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore Node Modules from Cache
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: unit testing
        run: npm test

      # e2e test are disabled for now
      #
      #- name: e2e testing
      #  run: npm run test:e2e

  coverage:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Restore Node Modules from Cache
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

      - name: coverage
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: [ check_dependencies, tests, linting_and_formatting ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for dependency updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_sha=$(git rev-parse HEAD)
          latest_sha=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.head_ref }} \
          | jq -r '.sha')
          if [[ "$current_sha" != "$latest_sha" ]]; then
          echo "::set-output name=updated::true"
          fi

      - name: Pull latest changes
        if: steps.check_updates.outputs.updated == 'true'
        run: git pull

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Install semver
        run: npm install -g semver

      - name: Build the application
        run: npm run build

  versioning_and_changelog:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for dependency updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          current_sha=$(git rev-parse HEAD)
          latest_sha=$(curl --silent --header "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.head_ref }} \
          | jq -r '.sha')
          if [[ "$current_sha" != "$latest_sha" ]]; then
          echo "::set-output name=updated::true"
          fi

      - name: Pull latest changes
        if: steps.check_updates.outputs.updated == 'true'
        run: git pull

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install standard-version
        run: npm install -g standard-version

      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create release commit
        run: |
          npx standard-version
          git push --force-with-lease="refs/heads/${{ github.ref }}" --follow-tags origin ${{ github.ref }}